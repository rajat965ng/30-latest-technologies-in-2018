Chapter 3: Functions

	-- 	The first rule of functions is that they should be small. The second rule of functions is that
they should be smaller than that
	-- 	the blocks within if statements, else statements, while statements, and
so on should be one line long.
	--	we can’t always avoid switch statements, but we can make sure that each switch
		statement is buried in a low-level(Abstract class) class and is never repeated. We do this, of course, with
		polymorphism.
	--	general rule for switch statements is that they can be tolerated if they appear only once, are used to create polymorphic objects, and are hidden behind an inheritance	relationship so that the rest of the system can’t see them.
	--	A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment.
	--	The ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic).
		Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification—and
		then shouldn’t be used anyway.
	--	Passing a boolean into a function is a truly terrible practice. It immediately complicates the signature of the method, loudly 
		proclaiming that this function does more than one thing. It does one thing if the flag is true and another if the flag is false!
	--	When a function seems to need more than two or three arguments, it is likely that some of
		those arguments ought to be wrapped into a class of their own. Consider, for example, the
		difference between the two following declarations:
		Circle makeCircle(double x, double y, double radius);
		Circle makeCircle(Point center, double radius);
		Reducing the number of arguments by creating objects out of them may seem like
		cheating, but it’s not. When groups of variables are passed together, the way x and
		y are in the example above, they are likely part of a concept that deserves a name of its
		own.		
	--	Command Query Separation: Functions should either do something or answer something, but not both. Either your
		function should change the state of an object, or it should return some information about that object. Doing both often leads to confusion.	
	--	Don't Repeat Yourself: It’s not easy to spot this duplication because the four instances
		are intermixed with other code and aren’t uniformly duplicated. Still, the duplication is a problem because it bloats the code and
		will require four-fold modification should the algorithm ever have to change. It is also a four-fold opportunity for an error of omission	

