Chapter 2: Meaningful Names
	-- Choosing good names takes time but saves more than it takes. So take care with your names and change them when you find better ones. Everyone who reads your code (including you) will be happier if you do.		

	-- What is the purpose of this code?
		
		public List<int[]> getThem() {
		List<int[]> list1 = new ArrayList<int[]>();
		for (int[] x : theList)
		if (x[0] == 4)
		list1.add(x);
		return list1;
		}

		The code implic-itly requires that we know the answers to questions such as:
		1. What kinds of things are in theList ?
		2. What is the significance of the zeroth subscript of an item in theList ?
		3. What is the significance of the value 4 ?
		4. How would I use the list being returned?

		We find that the board is a list of cells called theList . Let’s rename that to gameBoard . Just by giving these concepts names we can improve the code considerably:
		public List<int[]> getFlaggedCells() {
		List<int[]> flaggedCells = new ArrayList<int[]>();
		for (int[] cell : gameBoard)
		if (cell.isFlagged())
		flaggedCells.add(cell);
		return flaggedCells;
		}

	-- 	Number-series naming (a1, a2, .. aN) is the opposite of intentional naming. Such names are not disinformative. 
		They are non-informative. they provide no clue to the author’s intention. Consider:
		public static void copyChars(char a1[], char a2[]) {
			for (int i = 0; i < a1.length; i++) {
			a2[i] = a1[i];
			}
			}
		This function reads much better when source and destination are used for the argument names.

	--  Noise words are redundant. The word variable should never appear in a variable name. The word customer should never appear 
		in a customer name.
	-- 	For example, say you are building an ABSTRACT FACTORY for the creation of shapes. This factory will be an interface and will
  		be implemented by a concrete class. I don’t want my users knowing that I’m handing them an interface.
  		I just want them to know that it’s a ShapeFactory .
  		So if I must encode either the interface or the implementation, I choose the implementation. Calling it ShapeFactoryImp.

  	--	Classes and objects should have noun or noun phrase names like Customer , WikiPage ,Account , and AddressParser . 
		Avoid words like Manager , Processor , Data , or Info in the name of a class. A class name should not be a verb.	

	-- 	When constructors are overloaded, use static factory methods with names that describe the arguments.
	 	For example,
		Complex fulcrumPoint = Complex.FromRealNumber(23.0);
		is generally better than
		Complex fulcrumPoint = new Complex(23.0);	
		Consider enforcing their use by making the corresponding constructors private.

