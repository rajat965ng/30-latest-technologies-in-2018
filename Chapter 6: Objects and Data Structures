Chapter 6: Objects and Data Structures

	-- Listing 6-1
		Concrete Point
		public class Point {
		public double x;
		public double y;
		}
		Listing 6-2
		Abstract Point
		public interface Point {
		double getX();
		double getY();
		void setCartesian(double x, double y);
		double getR();
		double getTheta();
		void setPolar(double r, double theta);
		}

		The beautiful thing about Listing 6-2 is that there is no way you can tell whether the
		implementation is in rectangular or polar coordinates. It might be neither! And yet the
		interface still unmistakably represents a data structure.

		Listing 6-1, on the other hand, is very clearly implemented in rectangular coordinates,
		and it forces us to manipulate those coordinates independently. This exposes implementa-
		tion. Indeed, it would expose implementation even if the variables were private and we
		were using single variable getters and setters.

	-- Listing 6-3
		Concrete Vehicle
		public interface Vehicle {
		double getFuelTankCapacityInGallons();
		double getGallonsOfGasoline();
		}
		Listing 6-4
		Abstract Vehicle
		public interface Vehicle {
		double getPercentFuelRemaining();
		}

		In both of the above cases the second option is preferable. We do not want to expose
		the details of our data. Rather we want to express our data in abstract terms.

		The worst option is to blithely add getters and setters.	

	-- the difference between objects and data structures. Objects hide
		their data behind abstractions and expose functions that operate on that data. Data struc-
		ture expose their data and have no meaningful functions.

	-- Law of Demeter: a module should not know about the innards of the objects it manipulates. The method should not invoke methods
		 on objects that are returned by any of the allowed functions.
	
		   final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();
	
		code  appears to violate the Law of Demeter (among other things)	because it calls the getScratchDir() function on the return value of getOptions() and then	calls getAbsolutePath() on the return value of getScratchDir() .	 

	-- This kind of code is often called a train wreck because it look like a bunch of coupled train cars.	

